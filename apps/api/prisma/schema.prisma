// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["live_chat"]
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String
  displayName   String
  avatarUrl     String?
  bio           String?
  isVerified    Boolean   @default(false)
  isSeller      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  products      Product[]
  streams       Stream[]
  orders        Order[]     @relation("BuyerOrders")
  sellerOrders  Order[]     @relation("SellerOrders")
  followers     Follows[]   @relation("Following")
  following     Follows[]   @relation("Followers")
  messages      ChatMessage[]
  reactions     MessageReaction[]

  @@schema("live_chat")
  @@map("users")
}

model Product {
  id          String    @id @default(cuid())
  sellerId    String
  title       String
  description String
  price       Float
  currency    String    @default("USD")
  images      String[]
  category    String
  inventory   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  seller      User      @relation(fields: [sellerId], references: [id])
  streams     Stream[]
  orderItems  OrderItem[]

  @@schema("live_chat")
  @@map("products")
}

model Stream {
  id          String    @id @default(cuid())
  sellerId    String
  title       String
  description String?
  thumbnailUrl String?
  status      String    @default("scheduled") // scheduled, live, ended
  startTime   DateTime
  endTime     DateTime?
  viewerCount Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  seller      User      @relation(fields: [sellerId], references: [id])
  products    Product[]
  messages    ChatMessage[]

  @@schema("live_chat")
  @@map("streams")
}

model Order {
  id          String    @id @default(cuid())
  buyerId     String
  sellerId    String
  status      String    @default("pending") // pending, paid, shipped, delivered, cancelled
  totalAmount Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  buyer       User      @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller      User      @relation("SellerOrders", fields: [sellerId], references: [id])
  items       OrderItem[]

  @@schema("live_chat")
  @@map("orders")
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  order       Order     @relation(fields: [orderId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@schema("live_chat")
  @@map("order_items")
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime  @default(now())

  // Relations
  follower    User      @relation("Following", fields: [followerId], references: [id])
  following   User      @relation("Followers", fields: [followingId], references: [id])

  @@id([followerId, followingId])

  @@schema("live_chat")
  @@map("follows")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  streamId  String
  content   String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  stream    Stream   @relation(fields: [streamId], references: [id])
  reactions MessageReaction[]

  @@schema("live_chat")
  @@map("chat_messages")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  reaction  String
  createdAt DateTime @default(now())

  // Relations
  message   ChatMessage @relation(fields: [messageId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@schema("live_chat")
  @@map("message_reactions")
}
